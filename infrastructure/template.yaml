AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for Sinkhole Detection System

Parameters:
  SlackWebhookUrl:
    Type: String
    Description: Slack Webhook URL for notifications
    NoEcho: true
  
  RssFeedUrl:
    Type: String
    Description: RSS Feed URL for news collection
    Default: "https://www.yonhapnews.co.kr/RSS/news.xml"

  WafAclArn:
    Type: String
    Description: ARN of existing WAF ACL to associate with CloudFront

Resources:
  SinkholeTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: !Sub ${AWS::StackName}-sinkhole-data

  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            // Lambda function code would go here
            console.log('Slack Webhook URL:', process.env.SLACK_WEBHOOK_URL);
            console.log('RSS Feed URL:', process.env.RSS_FEED_URL);
            return {
              statusCode: 200,
              body: JSON.stringify('Hello from Lambda!')
            };
          }
      Runtime: nodejs14.x
      Environment:
        Variables:
          SLACK_WEBHOOK_URL: !Ref SlackWebhookUrl
          RSS_FEED_URL: !Ref RssFeedUrl
          DYNAMODB_TABLE: !Ref SinkholeTable

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource: !GetAtt SinkholeTable.Arn

  # S3 Bucket for Frontend Files
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-frontend
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  # S3 Bucket for CloudFront Logs
  CloudFrontLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-cf-logs
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  # CloudFront Origin Access Identity
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "OAI for ${AWS::StackName} frontend"

  # Bucket Policy for CloudFront Access
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Sub ${FrontendBucket.Arn}/*

  # CloudFront Distribution
  FrontendDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        IPV6Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !GetAtt FrontendBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOAI}
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 86400
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        WebACLId: !Ref WafAclArn
        Logging:
          Bucket: !GetAtt CloudFrontLogsBucket.DomainName
          IncludeCookies: false
          Prefix: "cf-logs/"
        ViewerCertificate:
          MinimumProtocolVersion: TLSv1.2_2021
          CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html

  SinkholeApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-api
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub ${AWS::StackName}-api-key
      Enabled: true

  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref SinkholeApi
          Stage: prod
      UsagePlanName: !Sub ${AWS::StackName}-usage-plan

  ApiUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan

  ApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SinkholeApi}/*

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub https://${SinkholeApi}.execute-api.${AWS::Region}.amazonaws.com/prod/

  ApiKey:
    Description: "API Key ID"
    Value: !Ref ApiKey

  DynamoDBTableName:
    Description: "DynamoDB table name"
    Value: !Ref SinkholeTable

  FrontendBucketName:
    Description: "Name of the S3 bucket hosting frontend files"
    Value: !Ref FrontendBucket

  CloudFrontDistributionDomain:
    Description: "Domain name of the CloudFront distribution"
    Value: !GetAtt FrontendDistribution.DomainName

  CloudFrontDistributionId:
    Description: "ID of the CloudFront distribution"
    Value: !Ref FrontendDistribution
