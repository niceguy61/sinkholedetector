AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for Sinkhole Detection System

Parameters:
  SlackWebhookUrl:
    Type: String
    Description: Slack Webhook URL for notifications
    NoEcho: true
  
  RssFeedUrl:
    Type: String
    Description: RSS Feed URL for news collection
    Default: "https://www.yonhapnews.co.kr/RSS/news.xml"

Resources:
  # DynamoDB Table (unchanged)
  SinkholeTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-sinkhole-data
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: pubDate
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: pubDate
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: pubDate-index
          KeySchema:
            - AttributeName: pubDate
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # IAM Role for Lambda Functions (unchanged)
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: 
                  - !GetAtt SinkholeTable.Arn
                  - !Sub ${SinkholeTable.Arn}/index/*

  # RSS Collector Lambda (unchanged)
  RssCollectorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-rss-collector
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            // RSS collection logic will be implemented here
            console.log('RSS collection triggered');
          }
      Runtime: nodejs18.x
      Timeout: 30
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref SinkholeTable
          SLACK_WEBHOOK_URL: !Ref SlackWebhookUrl
          RSS_FEED_URL: !Ref RssFeedUrl

  # EventBridge Rule (unchanged)
  RssCollectionRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger RSS collection every hour"
      ScheduleExpression: "rate(1 hour)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt RssCollectorFunction.Arn
          Id: "RssCollectorTarget"

  # Permission for EventBridge (unchanged)
  RssCollectorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RssCollectorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RssCollectionRule.Arn

  # API Gateway REST API with CORS configuration
  SinkholeApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-api
      Description: API for Sinkhole Detection System
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Key
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub ${AWS::StackName}-api-key
      Description: API Key for Sinkhole Detection System
      Enabled: true

  # Usage Plan
  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref SinkholeApi
          Stage: !Ref ApiStage
      Description: Usage plan for Sinkhole Detection System
      UsagePlanName: !Sub ${AWS::StackName}-usage-plan

  # Usage Plan Key
  ApiUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan

  # API Lambda Function (unchanged)
  ApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-api
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              headers: {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Accept,Origin,Access-Control-Allow-Methods,Access-Control-Allow-Headers',
                'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH',
                'Access-Control-Allow-Credentials': 'true',
                'Access-Control-Max-Age': '3600'
              },
              body: JSON.stringify({ message: 'Success' })
            };
          }
      Runtime: nodejs18.x
      Timeout: 30
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref SinkholeTable

  # Root Resource OPTIONS Method
  RootOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref SinkholeApi
      ResourceId: !GetAtt SinkholeApi.RootResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With,Accept,Origin,Access-Control-Allow-Methods,Access-Control-Allow-Headers'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: true

  # Root Resource GET Method with API Key requirement
  RootGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref SinkholeApi
      ResourceId: !GetAtt SinkholeApi.RootResourceId
      HttpMethod: GET
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: "400"
        - StatusCode: "500"

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - RootGetMethod
      - RootOptionsMethod
    Properties:
      RestApiId: !Ref SinkholeApi

  # API Gateway Stage
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref SinkholeApi
      StageName: prod

  # API Domain Name
  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub ${SinkholeApi}.execute-api.${AWS::Region}.amazonaws.com
      EndpointConfiguration:
        Types:
          - REGIONAL

  # Base Path Mapping
  ApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiDomainName
      RestApiId: !Ref SinkholeApi
      Stage: !Ref ApiStage

  # Permission for API Gateway to invoke Lambda
  ApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ApiFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SinkholeApi}/*/*

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub https://${SinkholeApi}.execute-api.${AWS::Region}.amazonaws.com/prod/

  ApiKey:
    Description: "API Key ID"
    Value: !Ref ApiKey

  DynamoDBTableName:
    Description: "DynamoDB table name"
    Value: !Ref SinkholeTable
